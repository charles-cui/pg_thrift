CREATE EXTENSION pg_thrift;
-- struct (id = 123, phones=["123456", "abcdef"])
SELECT thrift_binary_get_int32(E'\\x0800010000007b0f00020b00000002000000063132333435360000000661626364656600' :: bytea, 1);
 thrift_binary_get_int32 
-------------------------
                     123
(1 row)

SELECT thrift_binary_get_bool(E'\\x0800010000007b0f00020b00000002000000063132333435360000000661626364656600' :: bytea, 1);
ERROR:  Invalid thrift format
SELECT thrift_binary_get_byte(E'\\x0300010000000ce4bda0e5a5bde4b896e7958c00' :: bytea, 1);
   thrift_binary_get_byte   
----------------------------
 \xe4bda0e5a5bde4b896e7958c
(1 row)

-- hello world
SELECT thrift_binary_get_string(E'\\x0b00010000000ce4bda0e5a5bde4b896e7958c00' :: bytea, 1);
 thrift_binary_get_string 
--------------------------
 你好世界
(1 row)

-- 1234567890.1234567890
SELECT thrift_binary_get_double(E'\\x04000141d26580b487e6b700' :: bytea, 1);
 thrift_binary_get_double 
--------------------------
         1234567890.12346
(1 row)

-- struct (id = 123, phones=["123456", "abcdef"])
SELECT thrift_binary_get_list_bytea(E'\\x0800010000007b0f00020b00000002000000063132333435360000000661626364656600' :: bytea, 2);
             thrift_binary_get_list_bytea              
-------------------------------------------------------
 {"\\x00000006313233343536","\\x00000006616263646566"}
(1 row)

SELECT parse_thrift_binary_string(UNNEST(thrift_binary_get_list_bytea(E'\\x0800010000007b0f00020b00000002000000063132333435360000000661626364656600' :: bytea, 2)));
 parse_thrift_binary_string 
----------------------------
 123456
 abcdef
(2 rows)

--TODO: add testing for thrift type
--SELECT thrift_binary_in('{"type" : "byte", "value" : ABCD}');
DROP EXTENSION pg_thrift;
